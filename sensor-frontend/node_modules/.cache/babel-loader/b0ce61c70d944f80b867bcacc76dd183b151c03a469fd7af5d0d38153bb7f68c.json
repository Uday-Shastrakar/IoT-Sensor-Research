{"ast":null,"code":"var _jsxFileName = \"D:\\\\IoT-Sensor-Research\\\\sensor-frontend\\\\src\\\\SensorData.js\",\n  _s = $RefreshSig$();\n// src/SensorData.js\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SensorData({\n  type,\n  sensorId\n}) {\n  _s();\n  const [reading, setReading] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const fetchData = () => {\n    // Fetch sensor data from the Spring Boot API\n    fetch(`http://localhost:8080/sensors/${type}?sensorId=${sensorId}`).then(response => response.json()).then(data => {\n      setReading(data.reading);\n      setLoading(false);\n    });\n  };\n  useEffect(() => {\n    fetchData(); // Fetch data immediately when the component mounts\n\n    // Set up a timer to fetch data every 5 seconds (adjust as needed)\n    const intervalId = setInterval(() => {\n      fetchData();\n    }, 5000); // 5000 milliseconds = 5 seconds\n\n    // Clean up the timer when the component unmounts\n    return () => clearInterval(intervalId);\n  }, [type, sensorId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [type, \" Sensor Data\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Sensor ID: \", sensorId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Type: \", type]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Reading: \", reading]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n_s(SensorData, \"i3MwGFRrpQIIzSrDOBjHz5bxWEQ=\");\n_c = SensorData;\nexport default SensorData;\nvar _c;\n$RefreshReg$(_c, \"SensorData\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SensorData","type","sensorId","_s","reading","setReading","loading","setLoading","fetchData","fetch","then","response","json","data","intervalId","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/IoT-Sensor-Research/sensor-frontend/src/SensorData.js"],"sourcesContent":["// src/SensorData.js\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nfunction SensorData({ type, sensorId }) {\r\n  const [reading, setReading] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const fetchData = () => {\r\n    // Fetch sensor data from the Spring Boot API\r\n    fetch(`http://localhost:8080/sensors/${type}?sensorId=${sensorId}`)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setReading(data.reading);\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData(); // Fetch data immediately when the component mounts\r\n\r\n    // Set up a timer to fetch data every 5 seconds (adjust as needed)\r\n    const intervalId = setInterval(() => {\r\n      fetchData();\r\n    }, 5000); // 5000 milliseconds = 5 seconds\r\n\r\n    // Clean up the timer when the component unmounts\r\n    return () => clearInterval(intervalId);\r\n  }, [type, sensorId]);\r\n\r\n  return (\r\n    <div>\r\n      <h2>{type} Sensor Data</h2>\r\n      {loading ? (\r\n        <p>Loading...</p>\r\n      ) : (\r\n        <div>\r\n          <p>Sensor ID: {sensorId}</p>\r\n          <p>Type: {type}</p>\r\n          <p>Reading: {reading}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SensorData;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,UAAUA,CAAC;EAAEC,IAAI;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACtC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAE5C,MAAMY,SAAS,GAAGA,CAAA,KAAM;IACtB;IACAC,KAAK,CAAE,iCAAgCR,IAAK,aAAYC,QAAS,EAAC,CAAC,CAChEQ,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;MACdR,UAAU,CAACQ,IAAI,CAACT,OAAO,CAAC;MACxBG,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC;EACN,CAAC;EAEDV,SAAS,CAAC,MAAM;IACdW,SAAS,CAAC,CAAC,CAAC,CAAC;;IAEb;IACA,MAAMM,UAAU,GAAGC,WAAW,CAAC,MAAM;MACnCP,SAAS,CAAC,CAAC;IACb,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;IAEV;IACA,OAAO,MAAMQ,aAAa,CAACF,UAAU,CAAC;EACxC,CAAC,EAAE,CAACb,IAAI,EAAEC,QAAQ,CAAC,CAAC;EAEpB,oBACEH,OAAA;IAAAkB,QAAA,gBACElB,OAAA;MAAAkB,QAAA,GAAKhB,IAAI,EAAC,cAAY;IAAA;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC1Bf,OAAO,gBACNP,OAAA;MAAAkB,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAEjBtB,OAAA;MAAAkB,QAAA,gBACElB,OAAA;QAAAkB,QAAA,GAAG,aAAW,EAACf,QAAQ;MAAA;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC5BtB,OAAA;QAAAkB,QAAA,GAAG,QAAM,EAAChB,IAAI;MAAA;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACnBtB,OAAA;QAAAkB,QAAA,GAAG,WAAS,EAACb,OAAO;MAAA;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtB,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAClB,EAAA,CAxCQH,UAAU;AAAAsB,EAAA,GAAVtB,UAAU;AA0CnB,eAAeA,UAAU;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}