{"ast":null,"code":"useEffect(() => {\n  const fetchData = () => {\n    // Fetch sensor data from the Spring Boot API\n    fetch(`http://localhost:8080/sensors/${type}?sensorId=${sensorId}`).then(response => response.json()).then(data => {\n      setReading(data.reading);\n      setLoading(false);\n    });\n  };\n  fetchData(); // Fetch data immediately when the component mounts\n\n  // Set up a timer to fetch data every 5 seconds (adjust as needed)\n  const intervalId = setInterval(() => {\n    fetchData();\n  }, 5000); // 5000 milliseconds = 5 seconds\n\n  // Clean up the timer when the component unmounts\n  return () => {\n    clearInterval(intervalId);\n  };\n}, [type, sensorId]);\nuseEffect(() => {\n  const fetchData = () => {\n    // Fetch sensor data from the Spring Boot API\n    fetch(`http://localhost:8080/sensors/${type}?sensorId=${sensorId}`).then(response => response.json()).then(data => {\n      setReading(data.reading);\n      setLoading(false);\n    });\n  };\n  fetchData(); // Fetch data immediately when the component mounts\n\n  // Set up a timer to fetch data every 5 seconds (adjust as needed)\n  const intervalId = setInterval(() => {\n    fetchData();\n  }, 5000); // 5000 milliseconds = 5 seconds\n\n  // Clean up the timer when the component unmounts\n  return () => {\n    clearInterval(intervalId);\n  };\n}, [type, sensorId]);","map":{"version":3,"names":["useEffect","fetchData","fetch","type","sensorId","then","response","json","data","setReading","reading","setLoading","intervalId","setInterval","clearInterval"],"sources":["D:/IoT-Sensor-Research/sensor-frontend/src/SensorData.js"],"sourcesContent":["useEffect(() => {\r\n    const fetchData = () => {\r\n      // Fetch sensor data from the Spring Boot API\r\n      fetch(`http://localhost:8080/sensors/${type}?sensorId=${sensorId}`)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          setReading(data.reading);\r\n          setLoading(false);\r\n        });\r\n    };\r\n  \r\n    fetchData(); // Fetch data immediately when the component mounts\r\n  \r\n    // Set up a timer to fetch data every 5 seconds (adjust as needed)\r\n    const intervalId = setInterval(() => {\r\n      fetchData();\r\n    }, 5000); // 5000 milliseconds = 5 seconds\r\n  \r\n    // Clean up the timer when the component unmounts\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, [type, sensorId]);\r\n  useEffect(() => {\r\n    const fetchData = () => {\r\n      // Fetch sensor data from the Spring Boot API\r\n      fetch(`http://localhost:8080/sensors/${type}?sensorId=${sensorId}`)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          setReading(data.reading);\r\n          setLoading(false);\r\n        });\r\n    };\r\n  \r\n    fetchData(); // Fetch data immediately when the component mounts\r\n  \r\n    // Set up a timer to fetch data every 5 seconds (adjust as needed)\r\n    const intervalId = setInterval(() => {\r\n      fetchData();\r\n    }, 5000); // 5000 milliseconds = 5 seconds\r\n  \r\n    // Clean up the timer when the component unmounts\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, [type, sensorId]);\r\n    "],"mappings":"AAAAA,SAAS,CAAC,MAAM;EACZ,MAAMC,SAAS,GAAGA,CAAA,KAAM;IACtB;IACAC,KAAK,CAAE,iCAAgCC,IAAK,aAAYC,QAAS,EAAC,CAAC,CAChEC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;MACdC,UAAU,CAACD,IAAI,CAACE,OAAO,CAAC;MACxBC,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC;EACN,CAAC;EAEDV,SAAS,CAAC,CAAC,CAAC,CAAC;;EAEb;EACA,MAAMW,UAAU,GAAGC,WAAW,CAAC,MAAM;IACnCZ,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;EAEV;EACA,OAAO,MAAM;IACXa,aAAa,CAACF,UAAU,CAAC;EAC3B,CAAC;AACH,CAAC,EAAE,CAACT,IAAI,EAAEC,QAAQ,CAAC,CAAC;AACpBJ,SAAS,CAAC,MAAM;EACd,MAAMC,SAAS,GAAGA,CAAA,KAAM;IACtB;IACAC,KAAK,CAAE,iCAAgCC,IAAK,aAAYC,QAAS,EAAC,CAAC,CAChEC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;MACdC,UAAU,CAACD,IAAI,CAACE,OAAO,CAAC;MACxBC,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC;EACN,CAAC;EAEDV,SAAS,CAAC,CAAC,CAAC,CAAC;;EAEb;EACA,MAAMW,UAAU,GAAGC,WAAW,CAAC,MAAM;IACnCZ,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;EAEV;EACA,OAAO,MAAM;IACXa,aAAa,CAACF,UAAU,CAAC;EAC3B,CAAC;AACH,CAAC,EAAE,CAACT,IAAI,EAAEC,QAAQ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}