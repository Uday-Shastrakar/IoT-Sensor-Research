{"ast":null,"code":"var _jsxFileName = \"D:\\\\IoT-Sensor-Research\\\\sensor-frontend\\\\src\\\\SensorData.js\",\n  _s = $RefreshSig$();\n// src/SensorData.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SensorData() {\n  _s();\n  const [sensorReading, setSensorReading] = useState({});\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Fetch temperature reading data from the Spring Boot API\n    axios.get('http://localhost:8080/sensors/temperature?sensorId=sensor1').then(response => {\n      setSensorReading(response.data);\n      setLoading(false);\n    }).catch(error => {\n      console.error('Error fetching sensor data:', error);\n      setLoading(false);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Sensor Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Sensor ID: \", sensorReading.sensorId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Type: \", sensorReading.type]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Reading: \", sensorReading.reading]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n_s(SensorData, \"QIFPvOxTD4zJPba/DARBSkXOwEo=\");\n_c = SensorData;\nexport default SensorData;\nvar _c;\n$RefreshReg$(_c, \"SensorData\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","SensorData","_s","sensorReading","setSensorReading","loading","setLoading","get","then","response","data","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","sensorId","type","reading","_c","$RefreshReg$"],"sources":["D:/IoT-Sensor-Research/sensor-frontend/src/SensorData.js"],"sourcesContent":["// src/SensorData.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction SensorData() {\r\n  const [sensorReading, setSensorReading] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Fetch temperature reading data from the Spring Boot API\r\n    axios.get('http://localhost:8080/sensors/temperature?sensorId=sensor1')\r\n      .then((response) => {\r\n        setSensorReading(response.data);\r\n        setLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching sensor data:', error);\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Sensor Data</h2>\r\n      {loading ? (\r\n        <p>Loading...</p>\r\n      ) : (\r\n        <div>\r\n          <p>Sensor ID: {sensorReading.sensorId}</p>\r\n          <p>Type: {sensorReading.type}</p>\r\n          <p>Reading: {sensorReading.reading}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SensorData;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC,CAAC;EACtD,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd;IACAC,KAAK,CAACS,GAAG,CAAC,4DAA4D,CAAC,CACpEC,IAAI,CAAEC,QAAQ,IAAK;MAClBL,gBAAgB,CAACK,QAAQ,CAACC,IAAI,CAAC;MAC/BJ,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC,CACDK,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnDN,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEN,OAAA;IAAAc,QAAA,gBACEd,OAAA;MAAAc,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACnBb,OAAO,gBACNL,OAAA;MAAAc,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAEjBlB,OAAA;MAAAc,QAAA,gBACEd,OAAA;QAAAc,QAAA,GAAG,aAAW,EAACX,aAAa,CAACgB,QAAQ;MAAA;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC1ClB,OAAA;QAAAc,QAAA,GAAG,QAAM,EAACX,aAAa,CAACiB,IAAI;MAAA;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACjClB,OAAA;QAAAc,QAAA,GAAG,WAAS,EAACX,aAAa,CAACkB,OAAO;MAAA;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpC,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAChB,EAAA,CA/BQD,UAAU;AAAAqB,EAAA,GAAVrB,UAAU;AAiCnB,eAAeA,UAAU;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}